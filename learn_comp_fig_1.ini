[seed]

seed = [0, 1, 2, 3, 4]

[-> params]

data = ["mnist", "fashion"]
csv_path = "result_fig_1.csv"
size = 60000

[-> lever]

# Complexity measure
comp_prior = "none"
comp_post = "risk"
alpha_prior = alpha_post
alpha_post = np.exp(np.linspace(math.log(math.sqrt(size_post)), math.log(size_post), 5)).tolist()
beta_prior = 0.5
beta_post = 0.5

# SGLD
batch_size = 64
prior = 0.0
decay = 0.5
epoch = 10
size_post = size-int(prior*size)

# Bound
bound = "lever"
delta = 0.05

# Command
command = python learn_comp.py ${data} ${csv_path} ${params}

[lever -- dziugaite]

# Complexity measure
comp_prior = comp_post
comp_post = "risk"
alpha_prior = np.exp(np.linspace(math.log(math.sqrt(size_post)), math.log(size_post), 5)).tolist()
alpha_post = np.exp(np.linspace(math.log(math.sqrt(size_post)), math.log(size_post), 5)).tolist()
beta_prior = 0.5
beta_post = 0.5

# SGLD
batch_size = 64
prior = 0.0
decay = 0.5
epoch = 10
size_post = size-int(prior*size)

# Bound
bound = "dziugaite"
delta = 0.05

# Command
command = python learn_comp.py ${data} ${csv_path} ${params}

[dziugaite -- comp]

# Complexity measure
comp_prior = comp_post
comp_post = "risk"
alpha_prior = np.exp(np.linspace(math.log(math.sqrt(size_post)), math.log(size_post), 5)).tolist() if prior > 0.0 else alpha_post
alpha_post = np.exp(np.linspace(math.log(math.sqrt(size_post)), math.log(size_post), 5)).tolist()
beta_prior = beta_post
beta_post = 0.5

# SGLD
batch_size = 64 
prior = [0.0, 0.5]
decay = 0.5
epoch = 10
size_post = size-int(prior*size)

# Bound
bound = "comp"
delta = 0.05

# Command
command = python learn_comp.py ${data} ${csv_path} ${params}
