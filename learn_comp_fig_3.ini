[seed]

seed = [0, 1, 2, 3, 4]

[-> params]

data = ["mnist", "fashion"]
csv_path = "result_fig_3.csv"
size = 60000

[-> comp]

# Complexity measure
comp_prior = "none"
comp_post = ["dist_dist_l2", "dist_sum_fro", "dist_dist_fro", "dist_param_norm", "dist_path_norm", "dist_gap", "dist_l2", "sum_fro", "dist_fro", "param_norm", "path_norm", "gap"]
alpha_prior = size_post
alpha_post = size_post
beta_prior = 0.5
beta_post = 0.5

# SG(L)D
batch_size = 64 
prior = 0.0
decay = 0.5
epoch = 10
size_post = size-int(prior*size)

# Bound
bound = "comp"
delta = 0.05

# Command
command = python learn_comp.py ${data} ${csv_path} ${params}

[comp -- neural_comp]

# Neural complexity measure
neural_batch_size = [64, 128, 256]
neural_val = [0.1, 0.3, 0.5]
neural_lr = [0.001, 0.0001]
neural_path = "data/model_neural_comp_"+data+"_"+str(neural_batch_size)+"_"+str(neural_val).replace("0.", "")+"_"+str(neural_lr).replace("0.", "")+".h5"

# Complexity measure
comp_prior = "none"
comp_post = ["neural", "dist_neural"]
alpha_prior = size_post
alpha_post = size_post
beta_prior = 0.5
beta_post = 0.5

# SG(L)D
batch_size = 64
prior = 0.0
decay = 0.5
epoch = 10
size_post = size-int(prior*size)

# Bound
bound = "comp"
delta = 0.05

# Command
command = python learn_comp.py ${data} ${csv_path} ${params}
